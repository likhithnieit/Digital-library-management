/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */

/**
 *
 * @author Likhith
 */
import java.time.LocalDate;
import java.time.Period;
import java.sql.*;
import javax.swing.*;
import javax.swing.table.DefaultTableModel;import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.temporal.ChronoUnit;
public class IssueBook extends javax.swing.JFrame {

    /**
     * Creates new form IssueBook
     */
    public IssueBook() {
        initComponents();
        setDefaultCloseOperation(IssueBook.DISPOSE_ON_CLOSE);
    }
    
    public static int generateDue(String issueDate,String todaysDate){
        // Parse the date strings
        LocalDate date1 = LocalDate.parse(issueDate, DateTimeFormatter.ISO_LOCAL_DATE);
        LocalDate date2 = LocalDate.parse(todaysDate, DateTimeFormatter.ISO_LOCAL_DATE);

        // Calculate the difference in days
        long differenceInDays = ChronoUnit.DAYS.between(date1, date2);
        if(differenceInDays > 10){
            return ((int)differenceInDays - 10) * 2;
        }
        return 0;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        usn_t = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        bookId_t = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        date_t = new javax.swing.JTextField();
        bookNameSearch_t1 = new javax.swing.JTextField();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        searchBookTable = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        issueButton = new javax.swing.JButton();
        backButton = new javax.swing.JButton();
        checkDuesButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("ISSUE BOOK");

        jLabel2.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel2.setText("Enter USN");

        jLabel3.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel3.setText("Enter Book ID");

        jLabel4.setFont(new java.awt.Font("Segoe UI", 0, 14)); // NOI18N
        jLabel4.setText("Enter Date(YYYY-MM-DD)");

        jButton1.setText("Fetch Book Details");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        searchBookTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "BookID", "Category", "Book Name", "Author", "Copies"
            }
        ));
        jScrollPane1.setViewportView(searchBookTable);

        jLabel6.setFont(new java.awt.Font("Segoe UI Light", 0, 12)); // NOI18N
        jLabel6.setText("In case you don't find the book ID, search with book name below.....");

        jLabel5.setText("Book Name");

        issueButton.setText("Issue");
        issueButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                issueButtonActionPerformed(evt);
            }
        });

        backButton.setText("Back");
        backButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backButtonActionPerformed(evt);
            }
        });

        checkDuesButton.setText("Check dues");
        checkDuesButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                checkDuesButtonActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 576, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(backButton)
                        .addGap(24, 24, 24))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, 107, Short.MAX_VALUE)
                                .addGap(18, 18, 18)
                                .addComponent(bookNameSearch_t1, javax.swing.GroupLayout.PREFERRED_SIZE, 297, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(31, 31, 31)
                                .addComponent(jButton1)
                                .addGap(99, 99, 99))
                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel4))
                                .addGap(36, 36, 36)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                        .addComponent(checkDuesButton)
                                        .addGap(130, 130, 130)
                                        .addComponent(issueButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(bookId_t, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(date_t, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addComponent(usn_t, javax.swing.GroupLayout.PREFERRED_SIZE, 305, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(0, 0, Short.MAX_VALUE))))))
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(161, 161, 161))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(backButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addComponent(usn_t, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookId_t, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(date_t, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(issueButton)
                    .addComponent(checkDuesButton))
                .addGap(34, 34, 34)
                .addComponent(jLabel6)
                .addGap(31, 31, 31)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(bookNameSearch_t1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        String bookName = bookNameSearch_t1.getText();
        String query = "select * from books where name = '"+bookName+"';";
        DefaultTableModel model = (DefaultTableModel)searchBookTable.getModel();
        DbConnection db = new DbConnection();
        model.setRowCount(0);
        int count = 0;
        try{
            Connection con = db.getConnection();
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(query);

            while(rs.next()){
                count++;
                String bookId = rs.getString("book_id");
                String category = rs.getString("category");
                String name = rs.getString("name");
                String author = rs.getString("author");
                int copies = rs.getInt("copied");

                model.addRow( new Object[] {bookId,category,name,author,copies});
            }
            if(count == 0)
            JOptionPane.showMessageDialog(this, "No books available");
        }catch(Exception e){
            JOptionPane.showMessageDialog(this, e.getMessage());
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    private void issueButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_issueButtonActionPerformed
        // TODO add your handling code here:
        String usn = usn_t.getText();
        String bookId = bookId_t.getText();
        String date = date_t.getText();
        int due = 0,booksIssued = 0;
        DbConnection db = new DbConnection();
        String checkStuQuery = "select * from students where usn = '"+usn+"';";
        String AlreadyIssuedQuery = "select * from books_issued where book_id = '"+bookId+"' and usn = '"+usn+"';";
        String bookIssuedDetailsQuery = "select * from books_issued where usn = '"+usn+"';";
        String booksAvailableQuery = "select * from books where book_id = '"+bookId+"';";
        String checkCopiesQuery = "select * from books where book_id = '"+bookId+"' and copied > 0;";
        String issueBookQuery = "insert into books_issued values ('"+usn+"','"+bookId+"','"+date+"');";
        String decrementCount = "update books set copied = copied - 1 where book_id = '"+bookId+"';";
        
         LocalDate today = LocalDate.now();
        String todayString = today.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        
        if(usn.isBlank() || bookId.isBlank() || date.isBlank()){
            JOptionPane.showMessageDialog(this, "Please enter all details");
                return;
        }
        //if(!date.equals(todayString)){
        //    JOptionPane.showMessageDialog(this, "Please enter today's date");
        //    return;
        //}
        try{
            Connection con = db.getConnection();
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(checkStuQuery);
            if(!rs.next()){
                JOptionPane.showMessageDialog(this, "Student not Registered");
                return;
            }
            rs = stm.executeQuery(AlreadyIssuedQuery);
            
            if(rs.next()){
                JOptionPane.showMessageDialog(this, bookId+" is already issued");
                return;
            }
            
            rs = stm.executeQuery(bookIssuedDetailsQuery);
            while(rs.next()){
                String issuedDate = rs.getString("issue_date");
                due += generateDue(issuedDate,todayString);
                booksIssued++;
                
            }
            
            if(due > 0){
                JOptionPane.showMessageDialog(this,"Please return the books and clear the dues");
                return;
            }
            if(booksIssued >= 4){
                JOptionPane.showMessageDialog(this,"A student cannot borrow more than 4 books");
                return;
            }
            
            rs = stm.executeQuery(booksAvailableQuery);
            if(rs.next()){
                //check copies
                ResultSet rs1 = stm.executeQuery(checkCopiesQuery);
                if(rs1.next()){
                    //issue book
                    int n = stm.executeUpdate(issueBookQuery);
                    int n2 = stm.executeUpdate(decrementCount);
            
                    if(n > 0 && n2 > 0){
                     JOptionPane.showMessageDialog(this,"Book issued succesfully");
                    }
                }else{
                JOptionPane.showMessageDialog(this,"Sorry book is currently unavailable");
                }
            }else{
                JOptionPane.showMessageDialog(this,"Please enter the correct book Id");
                return;
            }
            
            
            
            
            
            
        }catch(Exception e){
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
        
    }//GEN-LAST:event_issueButtonActionPerformed

    private void backButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backButtonActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_backButtonActionPerformed

    private void checkDuesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_checkDuesButtonActionPerformed
        // TODO add your handling code here:
        DbConnection db = new DbConnection();
        String usn = usn_t.getText();
        String date = date_t.getText();
        int due = 0;
         LocalDate today = LocalDate.now();
        String todayString = today.format(DateTimeFormatter.ofPattern("yyyy-MM-dd"));
        
        //Queriss
        String fetchIssueDates = "select issue_date from books_issued where usn = '"+usn+"';";
        
        try{
            Connection con = db.getConnection();
            Statement stm = con.createStatement();
            ResultSet rs = stm.executeQuery(fetchIssueDates);
            
           while(rs.next()){
                String issuedDate = rs.getString("issue_date");
                due += generateDue(issuedDate,todayString);
            }
           
           if(due == 0){
            JOptionPane.showMessageDialog(this,"No dues pending");
           }else{
            JOptionPane.showMessageDialog(this,"Due is "+due);
           }
            
        }catch(Exception e){
            
            JOptionPane.showMessageDialog(this,e.getMessage());
        }
    }//GEN-LAST:event_checkDuesButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(IssueBook.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new IssueBook().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backButton;
    private javax.swing.JTextField bookId_t;
    private javax.swing.JTextField bookNameSearch_t1;
    private javax.swing.JButton checkDuesButton;
    private javax.swing.JTextField date_t;
    private javax.swing.JButton issueButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable searchBookTable;
    private javax.swing.JTextField usn_t;
    // End of variables declaration//GEN-END:variables
}
